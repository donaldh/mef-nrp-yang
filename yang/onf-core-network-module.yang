module onf-core-network-module {
  namespace "uri:onf:core-network-module";
  prefix onf-cn;

  import onf-core-network-types {
    prefix onf-cnt;
  }

  import onf-core-specs {
    prefix onf-cs;
  }

  import network-topology {
    prefix nt;
  }

  revision 2016-06-21 {
  }

  container forwarding-constructs {
    list forwarding-construct {
      key 'uuid';

      leaf uuid {
        type string;
      }

      uses G_ForwardingConstruct;
    }
  }

  grouping G_ForwardingConstruct {
    leaf layerProtocolName {
      type onf-cnt:LayerProtocolName;
      description "The layerProtocol at which the FC enables potential for forwarding.";
    }
    leaf-list lowerLevelFc {
      description "An FC object supports a recursive aggregation relationship such that the internal construction
of an FC can be exposed as multiple lower level FC objects (partitioning).  Aggregation is used
as for the FD to allow changes in hierarchy.
";
      ordered-by system;
      type leafref {
        path '/forwarding-constructs/forwarding-construct/uuid';
      }
    }
    list fcRoute {
      description "An FC object can have zero or more routes, each of which is defined as a list of lower level FC
objects describing the flow across the network.";
      key 'uuid';
      config true;
      ordered-by system;
      uses G_FcRoute;
    }
    list fcPort {
      description "The association of the FC to LTPs is made via FcPorts (essentially the ports of the FC).";
      key 'topology node tp';
      config true;
      uses onf-cs:ltp-ref;
      min-elements 2;
    }
    leaf fcSpec {
      type leafref {
        path '/onf-cs:fc-specs/onf-cs:fc-spec/onf-cs:uuid';
      }
      description "References the specification that describes the capability and internal structure of of the FC
(e.g. The arrangement of switches for a particular instance is described by a referenced
FcSpec).  The specification allows interpretation of FcPort role and switch configurations etc.";
    }
    leaf forwardingDirection {
      type onf-cnt:ForwardingDirection;
      description "The directionality of the ForwardingConstruct.  Is applicable to simple ForwardingConstructs
where all FcPorts are BIDIRECTIONAL (the ForwardingConstruct will be BIDIRECTIONAL) or
UNIDIRECTIONAL (the ForwardingConstruct will be UNIDIRECTIONAL).  Is not present in more complex
cases.";
    }
  }

  grouping G_FcRoute {
    leaf uuid {
      type string;
    }
    leaf-list fc {
      description "The list of FCs describing the route of an FC.";
      ordered-by system;
      type leafref {
        path '/onf-cn:forwarding-constructs/onf-cn:forwarding-construct/onf-cn:uuid';
      }
      min-elements 2;
    }
  }

  augment "/nt:network-topology/nt:topology/nt:node/nt:termination-point" {
    container fc-port {
      uses G_FcPort;
    }
  }

  grouping G_FcPort {
    leaf role {
      type onf-cnt:PortRole;
      description "Each FcPort of the FC has a role (e.g., working, protection, protected, symmetric, hub, spoke,
leaf, root) in the context of the FC with respect to the FC function.";
    }
    leaf fcPortDirection {
      type onf-cnt:PortDirection;
      description "The orientation of defined flow at the FcPort.";
    }
  }

}
